{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Natalya\\\\Desktop\\\\project_1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport CalculateForm from \"./Components/Calculate/CalculateForm/CalculateForm\";\nimport CalculateTable from \"./Components/Calculate/CalculateTable/CalculateTable\";\nimport Header from \"./Components/Header/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction calculateHandler(userInput) {\n  _s();\n  const [res, SetRes] = useState(null);\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  const yearlyData = []; // per-year results\n\n  let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput[\"expected-return\"] / 100;\n  const duration = +userInput[\"duration\"];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution\n    });\n  }\n\n  // do something with yearlyData ...\n  SetRes(yearlyData);\n}\n_s(calculateHandler, \"ce0Lvgh6prODZ+t8Kv8ZnyIIedk=\");\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculateForm, {\n      onCalulate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalculateTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","CalculateForm","CalculateTable","Header","jsxDEV","_jsxDEV","calculateHandler","userInput","_s","res","SetRes","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","App","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalulate","_c","$RefreshReg$"],"sources":["C:/Users/Natalya/Desktop/project_1/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport CalculateForm from \"./Components/Calculate/CalculateForm/CalculateForm\";\nimport CalculateTable from \"./Components/Calculate/CalculateTable/CalculateTable\";\nimport Header from \"./Components/Header/Header\";\n\nfunction calculateHandler(userInput) {\n  const [res, SetRes] = useState(null);\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  const yearlyData = []; // per-year results\n\n  let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput[\"expected-return\"] / 100;\n  const duration = +userInput[\"duration\"];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution,\n    });\n  }\n\n  // do something with yearlyData ...\n  SetRes(yearlyData)\n}\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <CalculateForm onCalulate={calculateHandler} />\n      <CalculateTable />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,aAAa,MAAM,oDAAoD;AAC9E,OAAOC,cAAc,MAAM,sDAAsD;AACjF,OAAOC,MAAM,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,gBAAgBA,CAACC,SAAS,EAAE;EAAAC,EAAA;EACnC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpC;EACA;;EAEA,MAAMW,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIC,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;EACpD,MAAMM,kBAAkB,GAAG,CAACN,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC9D,MAAMO,cAAc,GAAG,CAACP,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;EAC1D,MAAMQ,QAAQ,GAAG,CAACR,SAAS,CAAC,UAAU,CAAC;;EAEvC;EACA,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;IACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;IACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;IACrDF,UAAU,CAACO,IAAI,CAAC;MACd;MACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;MACXC,cAAc,EAAEA,cAAc;MAC9BG,gBAAgB,EAAER,cAAc;MAChCC,kBAAkB,EAAEA;IACtB,CAAC,CAAC;EACJ;;EAEA;EACAH,MAAM,CAACC,UAAU,CAAC;AACpB;AAACH,EAAA,CA3BQF,gBAAgB;AA6BzB,SAASe,GAAGA,CAAA,EAAG;EACb,oBACEhB,OAAA;IAAAiB,QAAA,gBACEjB,OAAA,CAACF,MAAM;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVrB,OAAA,CAACJ,aAAa;MAAC0B,UAAU,EAAErB;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC/CrB,OAAA,CAACH,cAAc;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV;AAACE,EAAA,GARQP,GAAG;AAUZ,eAAeA,GAAG;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}